{"version":3,"sources":["projects/Mapty/script.js"],"names":["Workout","coords","distance","duration","Date","now","slice","description","type","toUpperCase","months","date","getMonth","getDate","clicks","Running","cadence","calcPace","_setDescription","pace","Cycling","elevationGain","calcSpeed","speed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","logo","App","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","reset","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","map","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","_renderWorkoutMarker","mapE","classList","remove","focus","value","style","display","add","setTimeout","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","workout","latlng","lat","lng","elevation","push","_renderWorkout","_hideForm","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","id","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","removeItem","location","reload","app"],"mappings":"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","file":"script.f8efd12e.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    // this.date = ...\n    // this.id = ...\n    this.coords = coords; // [lat, lng]\n    this.distance = distance; // in km\n    this.duration = duration; // in min\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    // this.type = 'cycling';\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    // km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cycling1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cycling1);\n\n///////////////////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\nconst logo = document.querySelector('.logo')\n\nclass App {\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  constructor() {\n    // Get user's position\n    this._getPosition();\n\n    // Get data from local storage\n    this._getLocalStorage();\n\n    // Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n    logo.addEventListener('click', this.reset.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\n\n    const coords = [latitude, longitude];\n\n    this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this.#map);\n\n    // Handling clicks on map\n    this.#map.on('click', this._showForm.bind(this));\n\n    this.#workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    // Empty inputs\n    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value =\n      '';\n\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    // If workout running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n\n      // Check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If workout cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    // Add new object to workout array\n    this.#workouts.push(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    // Hide form + clear input fields\n    this._hideForm();\n\n    // Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? '🏃‍♂️' : '🚴‍♀️'\n          }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⏱</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:\n    if (!this.#map) return;\n\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n\n    // using the public interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this.#workouts = data;\n\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"]}